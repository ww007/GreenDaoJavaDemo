package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.RoundResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROUND_RESULT.
*/
public class RoundResultDao extends AbstractDao<RoundResult, Long> {

    public static final String TABLENAME = "ROUND_RESULT";

    /**
     * Properties of entity RoundResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RoundResultID = new Property(0, Long.class, "RoundResultID", true, "ROUND_RESULT_ID");
        public final static Property StudentItemID = new Property(1, Integer.class, "StudentItemID", false, "STUDENT_ITEM_ID");
        public final static Property Result = new Property(2, Integer.class, "Result", false, "RESULT");
        public final static Property RoundNo = new Property(3, Integer.class, "RoundNo", false, "ROUND_NO");
        public final static Property TestTime = new Property(4, String.class, "TestTime", false, "TEST_TIME");
        public final static Property ResultState = new Property(5, Integer.class, "ResultState", false, "RESULT_STATE");
        public final static Property IsLastResult = new Property(6, Integer.class, "IsLastResult", false, "IS_LAST_RESULT");
        public final static Property Remark1 = new Property(7, String.class, "Remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(8, String.class, "Remark2", false, "REMARK2");
        public final static Property Remark3 = new Property(9, String.class, "Remark3", false, "REMARK3");
    };


    public RoundResultDao(DaoConfig config) {
        super(config);
    }
    
    public RoundResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROUND_RESULT' (" + //
                "'ROUND_RESULT_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: RoundResultID
                "'STUDENT_ITEM_ID' INTEGER," + // 1: StudentItemID
                "'RESULT' INTEGER," + // 2: Result
                "'ROUND_NO' INTEGER," + // 3: RoundNo
                "'TEST_TIME' TEXT," + // 4: TestTime
                "'RESULT_STATE' INTEGER," + // 5: ResultState
                "'IS_LAST_RESULT' INTEGER," + // 6: IsLastResult
                "'REMARK1' TEXT," + // 7: Remark1
                "'REMARK2' TEXT," + // 8: Remark2
                "'REMARK3' TEXT);"); // 9: Remark3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROUND_RESULT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RoundResult entity) {
        stmt.clearBindings();
 
        Long RoundResultID = entity.getRoundResultID();
        if (RoundResultID != null) {
            stmt.bindLong(1, RoundResultID);
        }
 
        Integer StudentItemID = entity.getStudentItemID();
        if (StudentItemID != null) {
            stmt.bindLong(2, StudentItemID);
        }
 
        Integer Result = entity.getResult();
        if (Result != null) {
            stmt.bindLong(3, Result);
        }
 
        Integer RoundNo = entity.getRoundNo();
        if (RoundNo != null) {
            stmt.bindLong(4, RoundNo);
        }
 
        String TestTime = entity.getTestTime();
        if (TestTime != null) {
            stmt.bindString(5, TestTime);
        }
 
        Integer ResultState = entity.getResultState();
        if (ResultState != null) {
            stmt.bindLong(6, ResultState);
        }
 
        Integer IsLastResult = entity.getIsLastResult();
        if (IsLastResult != null) {
            stmt.bindLong(7, IsLastResult);
        }
 
        String Remark1 = entity.getRemark1();
        if (Remark1 != null) {
            stmt.bindString(8, Remark1);
        }
 
        String Remark2 = entity.getRemark2();
        if (Remark2 != null) {
            stmt.bindString(9, Remark2);
        }
 
        String Remark3 = entity.getRemark3();
        if (Remark3 != null) {
            stmt.bindString(10, Remark3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RoundResult readEntity(Cursor cursor, int offset) {
        RoundResult entity = new RoundResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // RoundResultID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // StudentItemID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Result
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // RoundNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TestTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ResultState
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // IsLastResult
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Remark1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Remark2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Remark3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RoundResult entity, int offset) {
        entity.setRoundResultID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentItemID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setResult(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRoundNo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTestTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResultState(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsLastResult(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemark1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RoundResult entity, long rowId) {
        entity.setRoundResultID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RoundResult entity) {
        if(entity != null) {
            return entity.getRoundResultID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
