package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Class;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLASS.
*/
public class ClassDao extends AbstractDao<Class, Long> {

    public static final String TABLENAME = "CLASS";

    /**
     * Properties of entity Class.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ClassID = new Property(0, Long.class, "ClassID", true, "CLASS_ID");
        public final static Property GradeID = new Property(1, Integer.class, "GradeID", false, "GRADE_ID");
        public final static Property ClassCode = new Property(2, String.class, "ClassCode", false, "CLASS_CODE");
        public final static Property ClassName = new Property(3, String.class, "ClassName", false, "CLASS_NAME");
        public final static Property Remark1 = new Property(4, String.class, "Remark1", false, "REMARK1");
    };


    public ClassDao(DaoConfig config) {
        super(config);
    }
    
    public ClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLASS' (" + //
                "'CLASS_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ClassID
                "'GRADE_ID' INTEGER," + // 1: GradeID
                "'CLASS_CODE' TEXT," + // 2: ClassCode
                "'CLASS_NAME' TEXT," + // 3: ClassName
                "'REMARK1' TEXT);"); // 4: Remark1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLASS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Class entity) {
        stmt.clearBindings();
 
        Long ClassID = entity.getClassID();
        if (ClassID != null) {
            stmt.bindLong(1, ClassID);
        }
 
        Integer GradeID = entity.getGradeID();
        if (GradeID != null) {
            stmt.bindLong(2, GradeID);
        }
 
        String ClassCode = entity.getClassCode();
        if (ClassCode != null) {
            stmt.bindString(3, ClassCode);
        }
 
        String ClassName = entity.getClassName();
        if (ClassName != null) {
            stmt.bindString(4, ClassName);
        }
 
        String Remark1 = entity.getRemark1();
        if (Remark1 != null) {
            stmt.bindString(5, Remark1);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Class readEntity(Cursor cursor, int offset) {
        Class entity = new Class( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ClassID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // GradeID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ClassCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ClassName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Remark1
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Class entity, int offset) {
        entity.setClassID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGradeID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setClassCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Class entity, long rowId) {
        entity.setClassID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Class entity) {
        if(entity != null) {
            return entity.getClassID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
