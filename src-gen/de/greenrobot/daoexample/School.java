package de.greenrobot.daoexample;

import de.greenrobot.daoexample.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SCHOOL.
 */
public class School {

    private Long SchoolID;
    private String SchoolName;
    private String SchoolYear;
    private String Remark1;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SchoolDao myDao;

    private Grade grade;
    private Long grade__resolvedKey;


    public School() {
    }

    public School(Long SchoolID) {
        this.SchoolID = SchoolID;
    }

    public School(Long SchoolID, String SchoolName, String SchoolYear, String Remark1) {
        this.SchoolID = SchoolID;
        this.SchoolName = SchoolName;
        this.SchoolYear = SchoolYear;
        this.Remark1 = Remark1;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchoolDao() : null;
    }

    public Long getSchoolID() {
        return SchoolID;
    }

    public void setSchoolID(Long SchoolID) {
        this.SchoolID = SchoolID;
    }

    public String getSchoolName() {
        return SchoolName;
    }

    public void setSchoolName(String SchoolName) {
        this.SchoolName = SchoolName;
    }

    public String getSchoolYear() {
        return SchoolYear;
    }

    public void setSchoolYear(String SchoolYear) {
        this.SchoolYear = SchoolYear;
    }

    public String getRemark1() {
        return Remark1;
    }

    public void setRemark1(String Remark1) {
        this.Remark1 = Remark1;
    }

    /** To-one relationship, resolved on first access. */
    public Grade getGrade() {
        Long __key = this.SchoolID;
        if (grade__resolvedKey == null || !grade__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GradeDao targetDao = daoSession.getGradeDao();
            Grade gradeNew = targetDao.load(__key);
            synchronized (this) {
                grade = gradeNew;
            	grade__resolvedKey = __key;
            }
        }
        return grade;
    }

    public void setGrade(Grade grade) {
        synchronized (this) {
            this.grade = grade;
            SchoolID = grade == null ? null : grade.getGradeID();
            grade__resolvedKey = SchoolID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
